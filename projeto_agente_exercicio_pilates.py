# -*- coding: utf-8 -*-
"""Projeto_Agente_exercicio_pilates.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mwqwUkUctEJ1xSx1oY7SDSLN4MNO16xF
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip -q install google-genai

# Configura a API Key do Google Gemini
import os
from google.colab import userdata
os.environ["GOOGLE_API_KEY"] = userdata.get('GOOGLE_YOUR_API_KEY')

# Configura o cliente da SDK do Gemini
from google import genai
client = genai.Client()
MODEL_ID = "gemini-2.0-flash"

# Pergunta ao Gemini uma informa√ß√£o mais recente que seu conhecimento

from IPython.display import HTML, Markdown

# Perguntar pro modelo quando √© a pr√≥xima imers√£o de IA ###############################################
resposta = client.models.generate_content(
    model = MODEL_ID,
    contents = "Quando √© a pr√≥xima Imers√£o IA com Google Gemini do Alura?"
)

# Exibe a resposta na tela
display(Markdown(f"Resposta:\n {resposta.text}"))

# Commented out IPython magic to ensure Python compatibility.
# Instalar Framework ADK de agentes do Google ################################################
# %pip -q install google-adk

from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import google_search
from google.genai import types  # Para criar conte√∫dos (Content e Part)
from datetime import date
import textwrap # Para formatar melhor a sa√≠da de texto
from IPython.display import display, Markdown # Para exibir texto formatado no Colab
import requests # Para fazer requisi√ß√µes HTTP
import warnings
import json # Importa√ß√£o do m√≥dulo json (corre√ß√£o do erro anterior)

warnings.filterwarnings("ignore")

# Fun√ß√£o auxiliar que envia uma mensagem para um agente via Runner e retorna a resposta final
def call_agent(agent: Agent, message_text: str) -> str:
    # Cria um servi√ßo de sess√£o em mem√≥ria
    session_service = InMemorySessionService()
    # Cria uma nova sess√£o (voc√™ pode personalizar os IDs conforme necess√°rio)
    session = session_service.create_session(app_name=agent.name, user_id="user1", session_id="session1")
    # Cria um Runner para o agente
    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
    # Cria o conte√∫do da mensagem de entrada
    content = types.Content(role="user", parts=[types.Part(text=message_text)])

    final_response = ""
    # Itera assincronamente pelos eventos retornados durante a execu√ß√£o do agente
    for event in runner.run(user_id="user1", session_id="session1", new_message=content):
        if event.is_final_response():
            for part in event.content.parts:
                if part.text is not None:
                    final_response += part.text
                    final_response += "\n"
    return final_response

# Fun√ß√£o auxiliar para exibir texto formatado em Markdown no Colab
def to_markdown(text):
  text = text.replace('‚Ä¢', '  *')
  return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))

##########################################
# --- Agente 1: Buscador de Not√≠cias --- #
##########################################
def agente_buscador(exercicio):
    buscador = Agent(
        name = "agente_buscador",
        model = "gemini-2.0-flash",
        instruction="""
        Voc√™ √© um assistente de pesquisa. Sua tarefa √© usar a ferramenta de busca do Google
        (google_search) para recuperar informa√ß√µes confi√°veis para a execu√ß√£o do exerc√≠cio de pilates
        de forma segura. Foque em canais confi√°veis e de reputa√ß√£o comprovada que
        informem detalhes do exerc√≠cio pesquisado. Busque 10 sites mais
        relevantes sobre o exerc√≠cio de pilates buscado.
        """,
        description="Agente que busca informa√ß√µes sobre not√≠cias no Google",
        tools = [google_search]
)

    entrada_do_agente_buscador = f"Exerc√≠cio de pilates: {exercicio}"
    informacoes = call_agent(buscador, entrada_do_agente_buscador)
    return informacoes

################################################
# --- Agente 2: Planejador de posts --- #
################################################
def agente_planejador(exercicio, informacoes_buscadas):
    planejador = Agent(
        name="agente_planejador",
        model="gemini-2.0-flash",
        # Inserir as instru√ß√µes do Agente Planejador #################################################
        instruction="""
        Voc√™ √© um planejador de conte√∫do, especialista em aplicativos para celular sobre exerc√≠cios f√≠sicos.
        Com base nos sites obtidos pelo buscador em sites especializados, voc√™ deve:
        usar a ferramenta de busca do Google (google_search) para criar um plano sobre quais s√£o os
        pontos mais importantes na execu√ß√£o do exerc√≠cio de pilates para tr√™s
        n√≠veis de usu√°rios: iniciante, intermedi√°rio e avan√ßado de pilates.
        Voc√™ tamb√©m pode usar o (google_search) para encontrar mais informa√ß√µes sobre a execu√ß√£o do exerc√≠cio e
        aprofundar nas orienta√ß√µes para cada n√≠vel de usu√°rio. Ao final, voc√™ colocar√° em t√≥picos o passo-a-passo para a execu√ß√£o precisa do
        exerc√≠cio de pilates com base nas suas pesquisas e retornar
        os n√≠veis b√°sico, intermedi√°rio e avan√ßado a serem abordados nos cards, que ser√£o escritos posteriormente. Os cards devem ser pensados
        progressivamente para os tr√™s n√≠veis de usu√°rios.
        """,
        description="Agente que planeja posts",
        tools=[google_search]
    )

    entrada_do_agente_planejador = f"Exerc√≠cio {exercicio} de pilates: {informacoes_buscadas}"
    # Executa o agente
    plano_do_post = call_agent(planejador, entrada_do_agente_planejador)
    return plano_do_post

##########################################
# --- Agente 3: Redator de Cards --- #
##########################################
def agente_redator(exercicio, plano):
    redator = Agent(
        name="agente_redator",
        model="gemini-2.5-flash-preview-04-17",
        instruction=f"""
            Voc√™ √© um Redator especializado em criar cards para aplicativos mobile de exerc√≠cios f√≠sicos.
            Utilize as informa√ß√µes fornecidas no plano de cards e os t√≥picos fornecidos e, com base nisso,
            escreva um rascunho de cards para o aplicativo sobre o exerc√≠cio abordado nos tr√™s n√≠veis de usu√°rios
             (b√°sico, intermedi√°rio e avan√ßado em pilates). O nome do exerc√≠cio deve ser mantido como
             originalmente solicitado {exercicio} mas a linguagem dos cards deve ser em portugu√™s.

            Cada card deve conter:
            - 'titulo': O t√≠tulo √© o exerc√≠cio solicitado card.
            - 'base': Informa√ß√µes de n√≠vel b√°sico do exerc√≠cio.
            - 'topicos': Uma lista de como o exerc√≠cio deve ser realizado.
            - 'modificacoes': Se aplic√°vel, detalhes sobre modifica√ß√µes ou varia√ß√µes do exerc√≠cio.
            - 'progressoes': Se aplic√°vel, detalhes para progress√µes e varia√ß√µes do exerc√≠cio para n√≠vel intermedi√°rio e avan√ßado.
            - 'erros_comuns': Se aplic√°vel, os erros comuns mencionados e seus ajustes para cada n√≠vel.

            As instru√ß√µes devem ser precisas. Importante salientar a respira√ß√£o e o m√∫sculo a ser trabalhado. O p√∫blico √© exigente,
            necessitando de detalhes precisos e informativos. Crie os cards seguindo rigorosamente o plano fornecido, mas sucinto e
            adequado para a visualiza√ß√£o em um aplicativo mobile. Se necess√°rio, crie cards extras para modifica√ß√µes e progress√µes.
            As informa√ß√µes de erros comuns devem aparecer em cada card.
            Inicie cada card com o seguinte:
            Cada card DEVE come√ßar com o indicador:

            '***IN√çCIO DO CARD***'

            E cada card DEVE terminar com o indicador:
            '***FIM DO CARD***'

           """,
        description="Agente para redigir cards de exerc√≠cios de Pilates."
    )
    entrada_do_agente_redator = f"Por favor, gere os cards de Pilates para o {exercicio} seguindo este plano: {plano}."
    rascunho = call_agent(redator, entrada_do_agente_redator)
    return rascunho

##########################################
# --- Agente 4: Revisor de Qualidade --- #
##########################################
def agente_revisor(exercicio, rascunho_gerado):
    revisor = Agent(
        name="agente_revisor",
        model="gemini-2.5-flash-preview-04-17",
        instruction="""
            Voc√™ √© um Editor e Revisor de Conte√∫do meticuloso, especializado em cards para aplicativos de exerc√≠cios f√≠sicos,
            com foco em p√∫blico pr√°tico e experiente, necessitando de detalhes precisos e informativos.
            Use um tom de escrita adequado.
            Revise o rascunho dos cards sobre o exerc√≠cio indicado, verificando o detalhamento do exerc√≠cio para cada n√≠vel
            de usu√°rio (iniciante em pilates, intermedi√°rio em pilates, experiente em pilates) com clareza, concis√£o, corre√ß√£o e tom.
            Cada card come√ßa com o indicador:

            '***IN√çCIO DO CARD***'

            E cada card termina com o indicador:
            '***FIM DO CARD***'

            Se o rascunho estiver bom, responda apenas 'O rascunho est√° √≥timo e pronto para publicar!'.
            Caso haja problemas, aponte-os e sugira melhorias.
            """,
        description="Agente revisor de post para redes sociais."
    )
    entrada_do_agente_revisor = f"Exerc√≠cio: {exercicio}\nRascunho: {rascunho_gerado}"
    # Executa o agente
    texto_revisado = call_agent(revisor, entrada_do_agente_revisor)
    return texto_revisado

print("üöÄ Iniciando o Sistema de Cria√ß√£o de Cards para Aplicativos de Celular para Exerc√≠cios de Pilates com 5 Agentes üöÄ")

# --- Obter o T√≥pico do Usu√°rio ---
exercicio = input("‚ùì Por favor, digite o EXERC√çCIO DE PILATES sobre o qual voc√™ quer criar os cards: ")

# Inserir l√≥gica do sistema de agentes ################################################
if not exercicio:
  print("Voc√™ esqueceu de digitar o exerc√≠cio")
else:
  print(f"Maravilha! Vamos ent√£o criar os cards com os t√≥picos principais sobre o exerc√≠cio {exercicio} de pilates!")

informacoes_buscadas = agente_buscador(exercicio)
print("\n --- üìù Resultado do Agente 1 - (Buscador) ---\n")
display(to_markdown(informacoes_buscadas))
print("--------------------------------------------------")

plano_de_cards = agente_planejador(exercicio, informacoes_buscadas)
print("\n --- üìù Resultado do Agente 2 - (Planejador) ---\n")
display(to_markdown(plano_de_cards))
print("--------------------------------------------------")

rascunho_de_cards = agente_redator(exercicio, plano_de_cards)
print("\n --- üìù Resultado do Agente 3 - (Redator) ---\n")
display(to_markdown(rascunho_de_cards))
print("--------------------------------------------------")

cards_revisados = agente_revisor(exercicio, rascunho_de_cards)
print("\n --- üìù Resultado do Agente 4 - (Revisor) ---\n")
display(to_markdown(cards_revisados))
print("--------------------------------------------------")